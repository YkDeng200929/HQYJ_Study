指针数组
本质：本质上一个数组，数组里面存放的元素是指针类型的变量
定义： 定义 = 类型 + 名字
	   类型 = 定义 - 名字
	数据类型 数组名[元素个数]
	  --------
	  指针类型
	  目标数据类型 *数组名[元素个数] //[]的优先级比*高
		每个元素[指针类型]的目标类型 --> 目标数据类型
	eg:
		int a, b, c;
		char buf_char[3] = {'1', '2', '3'};
		short buf_short[3] = {1, 2, 3};
		int buf_int[3] = {10, 20, 30};
		char *buf_1[10] = {&buf_char[0], &buf_char[1], &buf_char[2], NULL}; //数组名为buf_1，里面存放的是char *的元素
		short *buf_2[10] = {&buf_short[0], &buf_short[1], &buf_short[2], NULL}; //数组名为buf_2，里面存放的是short *的元素
		int *buf_3[10] = {&buf_int[0], &buf_int[1], &buf_int[2], NULL};; //数组名为buf_3，里面存放的是int *的元素

数组名的理解：
	1、通常情况下：
		数组名 表示为 该数组首元素的地址
	2、两种特殊情况下：
		数组名[一个变量] 表示为 整个数组
		1> sizeof(数组名)
		2> &数组名
		
	short b[5] = {10, 20, 30, 40, 50};
	short *q = b;//q 是一个指向b这个数组的首元素地址的指针
	//b --> 通常情况下，理解为，该数组首元素的地址
	// b <==> &b[0]
	//特殊情况下理解，理解为整个数组，看成一个整体
	// b --> short [5]
	// &b --> short (*)[5] // 加括号的原因是：[]的优先级比*高
	short (*p_b)[5] = &b;//p_b是一个指向整个b数组的指针
	sizeof(b) --> 获取的是整个数组的大小，sizeof(shor) * 5 = 10字节 
	
		
		
	int a = 10, b = 20, c = 30;
	int *buf[4] = {&a, &b, &c , NULL};
	//buf --> 该数组的数组名
	//通常情况下：
	//	buf --> 该数组首元素的地址 --> &buf[0]
	//  buf[0] --> int *
	//  &buf[0]  --> int **
	int **p = buf;
	//两种特殊情况下：
	//  buf --> 看成一个变量 --> 看成一个整体，也就是整个数组
	sizeof(buf) --> 获取的是整个数组的字节数
	//buf --> int *[4]
	&buf --> int *(*)[4]
	

基本运算：和之前学过数组的基本运算都是一样的
	获取里面的元素的方式：
		数组名[数组下标]
			数组下标：从0开始，最大下标为len - 1
	获取数组的整体大小：
		sizeof(数组名)
	获取数组里面的元素个数：
		sizeof(数组名) / sizeof(数组名[下标]) //数组名[下标]

		


数组指针
本质：本质是一个指针，指向的是一个数组
定义：定义 = 类型 + 名字
	  类型 = 定义 - 名字
	  数组元素的类型 (*指针变量名)[指向数组的元素个数];
	eg:
	int a[5] = {10, 20, 30, 40, 50};//定义的是普通类型的数组
	//a --> int [5]
	//&a --> int (*)[5] // 加括号的原因是：[]的优先级比*高
	int (*p)[5] = &a;//p 是一个指针，指向的是int [5]类型的数组
	
数组指针 VS 二维数组：
	二维数组可以理解为特殊的一维数组，只不过二维数组的元素是一维数组
	int a[2][3] = {1, 2, 3, 4, 5, 6};
	--------------------------------
	//a作为数组名，通常情况下，该数组首元素的地址 --> &a[0]
	//a <==> &a[0]
	//a[0] --> int [3]
	//&a[0] --> int (*)[3]
	int (*p)[3] = a;// int (*p)[3] = &a[0] --> p 是一个指针，指向的目标类型是int [3]，相当于指向的是int [3]整个数组
	// p + n --> 偏移量 n * (sizeof(int [3])) --> 偏移量 n * 每一行的大小
	// p 称为行指针, p的类型是int (*)[3], p的目标类型是int [3]
	---------------------------------
	//a[0] 可以理解为 二维数组的第一个元素的名字，第一个元素是一维数组
	//a[0] 是一维数组的数组名 --> 通常情况下，该数组首元素的地址 --> &a[0][0]
	//a[0] <==> &a[0][0]
	//a[0][0] --> int
	//&a[0][0] --> int *
	int *q = a[0];//int *q = &a[0][0] --> q是一个指针，指向的目标类型是int，相当于是指向了二维数组的第一个元素的首元素的地址
	// q + n --> 偏移量 n * (sizeof(int)) --> 偏移量 n * 每一个元素的大小
	// q 称为列指针，q的类型是int *,q的目标类型是int
	--------------------------------
	人为理解：
	-------------
	| 1	| 2 | 3	| --> a[0]
	-------------
	| 4	| 5	| 6	| --> a[1]
	-------------
	
	物理模型：
	地址	存放的数据
	0x80	1
	0x84	2
	0x88	3
	0x8c	4
	0x90	5
	0x94	6
	
	行指针和列指针之间的转换
	int a[2][3] = {1, 2, 3, 4, 5, 6};
	int (*p)[3] = a;//行指针
	int *q = a[0];//列指针
	int i = 0, j = 0;//i控制行，j控制列
	结论：
		行指针-->列指针 
			*p <==> q
			p --> a --> &a[0]
			*p --> *a --> *&a[0] --> a[0]
		列指针-->行指针
			&q <==> p
			q --> a[0]
			&q --> &a[0] --> a --> p
		获取每一行的元素
			行指针：*(*(p + i) + j) <==> p[i][j] <==> a[i][j] <==> *(*(a + i) + j)
			列指针：*(p[i] + j)
















