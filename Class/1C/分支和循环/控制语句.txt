控制语句：顺序执行
		  判断语句
		  循环语句

判断/分支语句：
	1、if
		三种
		1>单分支
			if(表达式)
			{
				//C语句;
			}
			表达式为真(非0) --> 执行C语句
			表达式为假(0) --> 执行if后面的语句
		2>双分支
			if(表达式)
			{
				//C语句1;
			}
			else
			{
				//C语句2;
			}
			表达式为真(非0) --> 执行C语句1
			表达式为假(0) --> 执行C语句2
		3>多分支
			if(表达式1)
			{
				//C语句1;
			}
			else if(表达式2)
			{
				//C语句2;
			}
			else if(表达式3)
			{
				//C语句3;
			}
			...
			else if(表达式n)
			{
				//C语句n;
			}
			else
			{
				//C语句M;
			}
			表达式1为真 --> 执行C语句1 --> 结束整个if判断
			表达式1为假，表达式2为真 --> 执行C语句2 --> 结束整个if判断
			表达式1为假，表达式2为假 --> 执行C语句3 --> 结束整个if判断
			...
			所有的表达式都为假 --> 执行else中的C语句M --> 结束整个if判断
	2、switch-case
		switch(表达式)
		{
		case 常量1:
			//C语句1;
		case 常量2:
			//C语句2;
		case 常量3:
			//C语句3;
		...
		default:
			//C语句n;
		}
		计算表达式，表达式的结果和常量匹配，匹配成功后，执行后面多有的语句
		switch(表达式)
		{
		case 常量1:
			//C语句1;
			break;
		case 常量2:
			//C语句2;
			break;
		case 常量3:
			//C语句3;
			break;
		...
		default:
			//C语句n;
			break;
		}
		计算表达式，表达式的结果和常量匹配，匹配成功后，执行后面多有的语句，遇到break就结束整个switch语句

循环语句
	1、while()
		while(表达式)
		{
			//循环体
		}
		表达式为真 --> 进入循环，执行循环体 --> 直到表达式为假 --> 结束循环
	2、do{}while();
		do
		{
			//循环体
		}while(表达式);
		先执行一次循环体 --> 判断表达式为真 --> 进入循环，执行循环体 --> 直到表达式为假 --> 结束循环
		
	while和do..while的区别：
		do..while要无条件的执行一次循环体
		
	3、for( ; ; )
		for(初始化表达式; 循环条件表达式; 自增或自减)
		{
			//循环体
		}
		首先执行一次初始化表达式 --> 判断循环条件表达式，表达式为真 --> 执行循环体 --> 执行自增或自减 --> 判断循环条件表达式，直到循环条件表达式为假 --> 结束for循环

控制循环语句：
	1、break
		破坏离他最近的循环
	2、continue
		结束离他最近的本轮循环，进入下一轮循环

无条件跳转语句:
	goto lable(标签)
	使用方法：
	lable:
	
	goto lable;
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	